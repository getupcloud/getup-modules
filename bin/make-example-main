#!/usr/bin/env python

import os
import sys
import hcl2
import json

_help = '-h' in sys.argv or '--help' in sys.argv
if len(sys.argv) < 4 or _help:
    print(f"Usage: {sys.argv[0]} cluster-flavor module-name module-version [template-vars: name=value, ...]", file=sys.stderr)
    sys.exit(0 if _help else 1)

cluster_flavor, module_name, tag = sys.argv[1:4]
module_source_tpl = os.environ.get('MODULE_SOURCE_URL', 'git@github.com:getupcloud/getup-modules//modules/{cluster_flavor}/{module_name}?ref={tag}')
tpl_data = { k: v for k, v in [ i.split('=') for i in sys.argv[2:] if '=' in i ] } # transforms argv["name=value"] into dict
tpl_data.update({
    'cluster_flavor': cluster_flavor,
    'module_name': module_name,
    'tag': tag,
    'env': os.environ,
})
module_source_tpl = module_source_tpl.format(**tpl_data)

def load_config(cluster_flavor, tpl_data, config_file='examples/config.json'):
    with open(config_file, 'r') as f:
        try:
            config = json.load(f)
            map_var_orig = config.get('map_var', {})
            map_var_res = { k.format(**tpl_data): v.format(**tpl_data) for k, v in map_var_orig.items() }
            for k in list(map_var_res.keys()):
                if k in map_var_orig:
                    map_var_res[k] = map_var_orig[k].format(**tpl_data)
            no_use_var = [ i.format(**tpl_data) for i in config.get('no_use_var', []) ]
            ignore_var = [ i.format(**tpl_data) for i in config.get('ignore_var', []) ]
            config = {
                "map_var": map_var_res,
                "no_use_var": no_use_var,
                "ignore_var": ignore_var,
            }
            if '--print-config' in sys.argv:
                print(json.dumps(config, indent=3))
                sys.exit(0)
            return config
        except KeyError as ex:
            print(f'Erro loading config file for examples: {config_file}: {ex}', file=sys.stderr)
            sys.exit(1)
config = load_config(cluster_flavor, tpl_data)

hcl = hcl2.api.load(sys.stdin)

print(f'''
# File auto-generated by {sys.argv[0]} for ${cluster_flavor} cluster

module "{module_name}" {{
  source = "{module_source_tpl}"
'''.strip())
print()

for i, variable in enumerate(hcl.get('variable')):
    for name, content in variable.items():
        if name in config["no_use_var"]:
            #print(f'-> Ignored tfvar: {name}', file=sys.stderr)
            continue
        value = config["map_var"].get(name, f'var.{name}')
        #print(f'-> Mapped var: {name} = {value}', file=sys.stderr)
        print(f'  {name} = {value}')
print('}')
