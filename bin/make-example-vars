#!/usr/bin/env python

import re
import os
import sys
import json

var_start_re = re.compile('^\\s*variable\\s+"?([^\\s"]+)"?.*')
var_end_re = re.compile('^\\s*}\\s*')

_help = '-h' in sys.argv or '--help' in sys.argv
if len(sys.argv) < 2 or _help:
    print(f"Usage {sys.argv[0]} cluster-flavor [template-vars: name=value, ...]", file=sys.stderr)
    sys.exit(0 if _help else 1)

cluster_flavor = sys.argv[1]
tpl_data = { k: v for k, v in [ i.split('=') for i in sys.argv[2:] if '=' in i ] } # transforms argv["name=value"] into dict
tpl_data.update({
    'cluster_flavor': cluster_flavor,
    'env': os.environ
})

def load_config(cluster_flavor, tpl_data, config_file='examples/config.json'):
    with open(config_file, 'r') as f:
        try:
            config = json.load(f)
            map_var_orig = config.get('map_var', {})
            map_var_res = { k.format(**tpl_data): v.format(**tpl_data) for k, v in map_var_orig.items() }
            for k in list(map_var_res.keys()):
                if k in map_var_orig:
                    map_var_res[k] = map_var_orig[k].format(**tpl_data)
            no_use_var = [ i.format(**tpl_data) for i in config.get('no_use_var', []) ]
            ignore_var = [ i.format(**tpl_data) for i in config.get('ignore_var', []) ]
            config = {
                "map_var": map_var_res,
                "no_use_var": no_use_var,
                "ignore_var": ignore_var,
            }
            if '--print-config' in sys.argv:
                print(json.dumps(config, indent=3))
                sys.exit(0)
            return config
        except KeyError as ex:
            print(f'Erro loading config file for examples: {config_file}: {ex}', file=sys.stderr)
            sys.exit(1)
config = load_config(cluster_flavor, tpl_data)

print(f'# File auto-generated by {sys.argv[0]}')
print()

ignore = False
for line in sys.stdin.readlines():
    start_match = var_start_re.match(line)
    end_match = var_end_re.match(line) if not start_match else None

    if start_match:
        (name, ) = start_match.groups()
        ignore = name in config["ignore_var"]
    elif end_match:
        if ignore:
            print('#', end='')
        ignore = False

    if ignore:
        print('#', end='')

    print(line, end='')
